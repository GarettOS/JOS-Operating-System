Question 1: What is the purpose of having individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Answer: You couldn't figure out which error is being handled. You wouldn't be able to do breakpoints and couldn't differentiate between exceptions and interruptions. Also the protection we get would be lost

Question 2: Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

Answer: A page fault handler DPL is 0 so the user cannot access this. It produces interrupt vector 13 because when the user calls it it goes to general protection fault which is DPL 3

Question 3: The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

Answer: Because if you try to generate a break point exception with only user permissions it automatically generates a general protection fault. The actual break point exception is a kernel level interrupt. We set DPL to 3 for the break point handler so the user can actually call it

Question 4: What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

Answer: It is for protection. The user program's cant just do whatever they want.
